/*
    Author: Joe Waclawski
    Description: A robust example of how to handle a SIGCHLD.
    This program will register a Signal Handler for the SIGCHLD Signal,
    then start a simple child process using fork() and execvp(). Upon
    the user sending kill to the child process, it will be noted in this 
    parent that the signal is captured. 
*/
//This is SystemMgr

#include <stdio.h>
#include <signal.h>
#include <unistd.h>
#include <string.h>
#include <pthread.h>
#include <stdlib.h>

// structure to hold the parameters that are sent to the signal handling thread
typedef struct tp
{
    int lnSignal;
    siginfo_t * lpSigInfo;
} ThreadParams;


// prototypes
void forkexample();
void *SignalThread( void *ptr );

// our signal handler
void SigHandler(int sig, siginfo_t *info, void *context)
{
    // need to dynamically allocate memory, which must exist AFTER
    // signal handler exists
    // Thread MUST delete memory to prevent memory leak
    ThreadParams * lpThreadParams = (ThreadParams*) malloc(sizeof(ThreadParams));
    lpThreadParams->lnSignal = sig;
    lpThreadParams->lpSigInfo = info;
    // we don't uset the context. it is for advanced signal handling, but
    // we need to do something with it to get rid of the unused parameter compiler warning
    context = context;    

    // create a thread to handle the signal   
    pthread_t thread1;    
    int iret1 = pthread_create( &thread1, NULL, SignalThread, (void*) lpThreadParams);
    
    if (iret1 !=0)
    {
	    printf("Unable to create thread. Exiting");
	    exit(-1); // exiting ensures any threads that did start will be terminated
    }
}


int main()
{
    SystemConfig winston;
    GetSystemConfig(&winston);
    
    // install the signal handler for SIGCHLD
    // use the sigaction library function instead of signal to get more information
    // about the process that sent the signal
    // also, signal is deprecated
    struct sigaction sa;
    sa.sa_flags = SA_SIGINFO; // indicates siginfo struct is sent to handler
    sa.sa_sigaction = SigHandler;
    sigaction(SIGCHLD, &sa, NULL);

    
    forkexample();
    
    // do nothing waiting to be terminated 
    for(int i=1;;i++)
    {    //Infinite loop
        printf("%d : Inside Parent with PID = %d\n",i, getpid());
        sleep(1);  // Delay for 1 second
    }
    return 0;
}
  

void forkexample() 
{      
    // fork a child process
    int lnPid = fork();

    // child process because return value zero    
    if ( lnPid == 0) 
    {
        // null terminated list of arguments, where the first argument must be the namespace
        // of the program
        char * args[] = {"testchild",NULL};
        int status = execvp("testchild",args);
        //printf("Should not get here if execv was successful: %d\n",status);
    }
   
    // parent process because the value is > 0
    // the value returned is the PID of the child that was created
    else if ( lnPid > 0 )
    {
        printf("Hello from Parent. My PID = %d!\n",getpid()); 
        printf("Started child with PID = %d\n",lnPid);
    }
    else 
    {
        perror("Failed to start child with fork\n");
    }
}

void *SignalThread( void *ptr )
{
    // cast our input argument to the correct type that we are expecting
    ThreadParams * lpThreadParams = (ThreadParams*) ptr;
    
    switch(lpThreadParams->lnSignal)
    {
        case SIGINT:
        printf("Process %d receivd SIGINT (%d) from process %d\n", getpid(), lpThreadParams->lnSignal, lpThreadParams->lpSigInfo->si_pid);
        break;
        
        case SIGCHLD:
        printf("Process %d receivd SIGCHLD (%d) from process %d\n", getpid(), lpThreadParams->lnSignal, lpThreadParams->lpSigInfo->si_pid);
        break;
        
        default:
        printf("Process %d receivd signal %d from process %d\n", getpid(), lpThreadParams->lnSignal, lpThreadParams->lpSigInfo->si_pid);        
    }
    
    // per comment in Signal Handler, the memory must be deleted when 
    // we are done with it
    free(lpThreadParams);
    
    return NULL;
}
