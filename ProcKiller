/*
    Author: Joe Waclawski
    Description: Simple udp client adapted from material found on the internet
    This is the "Client" side of a UDP communication example. It will prompt
    the user for a message, and send it to the server. It will then  display
    the server's response.
*/

#include<stdio.h>    //printf 
#include<string.h> //memset
#include<stdlib.h> //exit(0);
#include<arpa/inet.h>
#include<sys/socket.h>
#include<unistd.h> //close
#include "socketsetup.h"
#include "udpserver_d.h"
#include "pthread.h"

#define BUFLEN 512    //Max length of buffer

// thread that receives data on the socket
void *ReceiveThread(void*);

// function to truncate stdin (i.e. keyboard input)
void FlushStdin(void);


// socket structure to define properties
// must be at file scope so the thread function can see it as well as main
struct sockaddr_in lsSAOther;
socklen_t lnSockStructLen=sizeof(lsSAOther);    

// place to store socket handle.
// must be at file scope so the thread function can see it as well as main
int lnSocketId = 0;



// simple routine to print an error and exit
void PrintErrorAndExit(char *lanErrorString)
{
    perror(lanErrorString);
    exit(1);
}

int main()
{
    int a;
    int port_to_kill;
    // get the socket setup information
    //SocketSetupStruct lsSocketSetup;
    SystemConfig winston;
    GetSystemConfig(&winston);
    pthread_t lnReceiveThread;
    

    TestData lsTestData;
    char lanMessage[BUFLEN] = {0};

    // attempt to create a socket
    if ( (lnSocketId=socket(AF_INET, SOCK_DGRAM, IPPROTO_UDP)) == -1)
    {
        PrintErrorAndExit("socket");
    }

    // zero out the structure used to define where the 
    // data is going (destination) on the socket 
    memset((char *) &lsSAOther, 0, sizeof(lsSAOther));
    
    // initialize the destination properties
    lsSAOther.sin_family = AF_INET;  // IPV4
    lsSAOther.sin_port = htons(lsSocketSetup.lnServerPort); // convert port to network byte order
    lsSAOther.sin_addr.s_addr = inet_addr(lsSocketSetup.lanServerAddress);
    
    // set the destination address in the destination properties
    if (inet_aton(lsSocketSetup.lanServerAddress, &lsSAOther.sin_addr) == 0) 
    {
        PrintErrorAndExit("inet_aton() failed\n");
    }
    
    // socket is set up, so now we can start the thread, which 
    // references the socket
    int lnTReturn = pthread_create( &lnReceiveThread, NULL, ReceiveThread, (void*)NULL);
    if (lnTReturn !=0)
    {
	    printf("Unable to create threads. Exiting");
	    exit(-1); // exiting ensures any threads that did start will be terminated
    }
    
    while(1)
    {
        // flush stdin to make sure there are no random characters in the keyboard buffer
        FlushStdin();
        
        // get data from user and populate our message
        
        printf("Which Child would you like to kill? \nEnter 1 for child 1.\nEnter 2 for child 2.\nEnter 3 for child 3.\n");
        scanf("%d", &a);

        switch(a){
            case 1:
                isSAOther.sin_port = htons(winston.lnChild1Port);
            case 2:
                isSAOther.sin_port = htons(winston.lnChild2Port);
            case 3:
                isSAOther.sin_port = htons(winston.lnChild3Port);

        }
        fflush(stdout);
        //send the Message
        if (sendto(lnSocketId, (char *)&lsTestData, sizeof(lsTestData) , 0 , 
            (struct sockaddr *) &lsSAOther, lnSockStructLen)==-1)
        {
            PrintErrorAndExit("sendto()");
        }
    }

    // close our socket resource
    close(lnSocketId);
    return 0;
}

void *ReceiveThread(void * ptr)
{
    ptr = ptr; // just to avoid the unused warning!
    
    char lanRecBuf[BUFLEN] = {0};
    TestData *lpTestData;
    FILE * lpFile = NULL;
    lpFile = fopen("server_replies.txt", "w");
    if (lpFile == NULL)
    {
        PrintErrorAndExit("Unable to open file to write server replies");
    }

    while (1)
    {
        //receive a reply and print it
        //clear the buffer by filling null, it might have previously received data
        memset(lanRecBuf,'\0', BUFLEN);
        
        //try to receive some data, this is a blocking call
        if (recvfrom(lnSocketId, lanRecBuf, BUFLEN, 0, 
            (struct sockaddr *) &lsSAOther, &lnSockStructLen) == -1)
        {
            PrintErrorAndExit("recvfrom()");
        }
        
        // cast receieved data to expected type and print data
        lpTestData = (TestData *)(lanRecBuf); 
        // fprintf(lpFile,"\nServer Reply:\n");
        // fprintf(lpFile,"X = %d\n", lpTestData->lnX);
        // fprintf(lpFile,"Y = %f\n", lpTestData->lfY);
        // fprintf(lpFile,"Text = %s\n", lpTestData->lanText);
        // fflush(lpFile);
    }
}

void FlushStdin(void)
{
    int c;
    while ((c = getchar()) != '\n' && c != EOF);
}
